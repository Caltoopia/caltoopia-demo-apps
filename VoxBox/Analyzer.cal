/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace VoxBox:

network Analyzer(int StepSize,
                 int WindowSize,
                 int LpcDegree,
                 float PreEmphasis)
  float In 
==> 
  float Coeff, 
  float G,
  float Residual:

  entities
    pre=PreEmphasisFilter(Coeff=PreEmphasis);
    
    seg=Segmentation(StepSize=StepSize, 
                     WindowSize=WindowSize);

    autoCorr=AutoCorr(WindowSize=WindowSize, 
                      MaxLag=LpcDegree);

    levinson=Levinson(LpcDegree=LpcDegree);
	
	res=PredictionFilter(BlockSize=WindowSize,NumZeros=LpcDegree);
	
	//pitch=PitchDetector(BlockSize=WindowSize,MaxPeriod=200 /* 80 Hz @ 16 kHz */);
  structure
    In --> pre.In;
    
    pre.Out --> seg.In;
    
    seg.Out --> autoCorr.In;
    seg.Out --> res.In;
     
    autoCorr.Out --> levinson.In;
    
    levinson.Coeff --> Coeff;
    levinson.Coeff --> res.Coeff;
    levinson.G --> G;
    
    res.Out --> Residual;
end

end
