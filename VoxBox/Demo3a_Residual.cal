/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
namespace VoxBox:

/**
 * This demo computes the LPC residual using the prediction filter.
 * The expected effect is to turn the input into a weak and noisy residual signal. 
 * 
 * Voiced sounds should be turned into an impulse train, unvoiced into white noise -at leasst that's the theory... 
 */

import ART.art_Sink_real;

network Demo3a_Residual() ==> :
  var
    int theStepSize = 128;
    int theWindowSize = 512;
    int theLpcDegree = 16;
    float PreEmphasis = 0.98;
    
  entities
    source = WavSource(fileName="./in.wav");
    
    pre=PreEmphasisFilter(Coeff=PreEmphasis);
    
    seg=Segmentation(StepSize=theStepSize, 
                     WindowSize=theWindowSize);

    autoCorr=AutoCorr(WindowSize=theWindowSize, 
                      MaxLag=theLpcDegree);

    levinson=Levinson(LpcDegree=theLpcDegree);
	
	delay=Delay(NumSamples=(theWindowSize-theStepSize)/2);
	
	res=PredictionFilter2(BlockSize=theStepSize,NumZeros=theLpcDegree);

    blackHole = DummySink();
    
	//sink = WavSink(fileName="./out.wav");
	//sink=art_Sink_real(fileName="./out.txt");
	sink=Speaker(BLOCK_SIZE=theStepSize,NUM_CHANNELS=1,SAMPLE_RATE=16000,BITS_PER_SAMPLE=16);
	
  structure
    source.Out --> pre.In;
    
    pre.Out --> seg.In;
    pre.Out --> delay.In;
    
    seg.Out --> autoCorr.In;
    seg.Out --> res.In;
     
    autoCorr.Out --> levinson.In;
    
    levinson.Coeff --> res.Coeff;
    levinson.G --> blackHole.In;
    
    delay.Out --> res.In;
    
    res.Out --> sink.In;
end

end
