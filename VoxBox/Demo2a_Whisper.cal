/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
namespace VoxBox:

/**
 * This demo exercises the LPC network + a synthesis filter that is excited by a noise source.
 * The expected effect is to turn an input speech sample (input.wav) into whisper (TestLPC.Out.wav).
 */

import ART.art_Sink_real;

network Demo2a_Whisper() ==> :
  entities
    source = WavSource(fileName="./in.wav");
    lpc=LPC(StepSize=128, 
            WindowSize=512, 
            LpcDegree=12, 
            PreEmphasis=0.98);
    
    noise=NoiseGenerator();
    
    synthFilter=AllPole(BlockSize=128, NumPoles=12);
 
    deEmp=DeEmphasisFilter(Coeff=0.98);
    
	//sink = WavSink(fileName="./out.wav");
	sink=Speaker(BLOCK_SIZE=128,NUM_CHANNELS=1,SAMPLE_RATE=16000,BITS_PER_SAMPLE=16);
	
	sinkRes = WavSink(fileName="./residual.wav");
	
  structure
    source.Out --> lpc.In;
    
    lpc.Coeff --> synthFilter.Coeff;
    lpc.G --> synthFilter.G;
    lpc.Residual --> sinkRes.In;
    
    noise.Out --> synthFilter.In;
    
    synthFilter.Out --> deEmp.In;
    
    deEmp.Out --> sink.In;
end

end
