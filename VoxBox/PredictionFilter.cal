/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
namespace VoxBox:

/**
 * The PredictionFilter actor implements the time-varying prediction-error (FIR) filter. 
 * @para BlockSize   Length of block (number of samples from In for each set of filter coefficients)
 * @para NumZeros    Order of the filter
 *
 * This version of the filter does not maintain any state between blocks (thus assuming zero-padding of input)
 * and trims edge effects from the output (thus producing BlockSize outputs rather than BlockSize+NumZeros outputs)
 * 
 * Ports:
 * In                Input samples
 * Coeff             Filter coefficients a0,...,aN  (where a0=1, N=NumZeros)
 * Out               Output, error signal (residual)
 */
actor PredictionFilter(int BlockSize, int NumZeros) 
      float In,
      float Coeff ==> 
      float Out:

  int Delay=NumZeros/2;
  
  action In:[x] repeat BlockSize, Coeff:[h] repeat NumZeros+1 ==> Out:[y] repeat BlockSize
  var
    List(size=BlockSize,type:float) y,
    float sum,
    int Kmin,
    int Kmax 
  do
    foreach int n in Delay..(BlockSize-1+Delay) do
      // Determine limits Kmin,Kmax of the convolution 
      Kmin:=if n>=BlockSize then BlockSize-1-n else 0 end;
      Kmax:=if n<NumZeros then n else NumZeros end;
      
      // Compute x*h
      sum:=0;
      foreach int k in Kmin..Kmax do
        sum:=sum + x[n-k]*h[k];
      end
      y[n-Delay] := sum;
    end
  end

end

end
