/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
namespace VoxBox:

import System.math.sin;
import System.math.sqrt;
import System.math.PI;

/**
 * Generates a train of impulses, which serves as excitation of the synthesis filter for voiced sounds.
 * @para BlockSize       The number of output samples to produce per "Period" sample.
 * @para MinPeriod       Miniumum period (corresponding to maximum frequency) to serve as a threshold
 *                       shorter periods (particularly zero) indicates that the previous value be kept.
 */

actor ImpulseGenerator(int BlockSize, int MinPeriod) float Period ==> float Out:

  float n0:=0;
  float lastPeriod:=42;
  
  function sinc(float x) --> float : if x=0 then 1 else sin(PI*x)/x/PI end end

  function entier(int x) --> int : x end 
  
  function round(float x) --> float : entier(x+0.5) end
  
  function phase(float x) --> float : x-round(x) end
    
  action Period:[newPeriod] ==> Out:[y] repeat BlockSize
  var
  	float p=if newPeriod>MinPeriod then newPeriod else lastPeriod end,
    float dc_offset=1/p,
    float amp=sqrt(p),
    List(size=BlockSize, type:float) y:=[ amp*(sinc(p*phase(n0+n/p)) - dc_offset) : for int n in 0..BlockSize-1]
  do
    n0:=phase(n0+BlockSize/p);
    lastPeriod:=p;
  end

end

end
