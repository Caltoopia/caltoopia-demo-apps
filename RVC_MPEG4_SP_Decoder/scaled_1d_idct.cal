/*
 * Copyright (c) 2010, Regents of the Akatech SA, EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
namespace RVC:

 import System.bitops.rshift;

 actor scaled_1d_idct (int IN_SZ, int OUT_SZ) int (size=IN_SZ) In ==> int (size=OUT_SZ) Out : 
  function pmul_1_0 (int X) --> int
    var int (size=32) Temp1 = rshift(X, 3) - rshift(X, 7):
        X - Temp1
  end

  function pmul_1_1 (int X) --> int
    var int (size=32) Temp1 = rshift(X, 3) - rshift(X, 7),
        int (size=32) Temp2 = Temp1 - rshift(X, 11):
        Temp1 + rshift(Temp2, 1)
  end

  function pmul_2_0 (int X) --> int
    var int (size=32) Temp1 = rshift(X, 9) - X:
        rshift(Temp1, 2) - Temp1
  end

  function pmul_2_1 (int X) --> int:
        rshift(X, 1)
  end

  function pmul_3_0 (int X) --> int
    var int (size=32) Temp1 = X + rshift(X, 5),
        int (size=32) Temp2 = rshift(Temp1, 2):
		Temp2 + rshift(X, 4)
  end       

  function pmul_3_1 (int X) --> int
    var int (size=32) Temp1 = X + rshift(X, 5),
        int (size=32) Temp2 = rshift(Temp1, 2):
        Temp1 - Temp2
  end       

        
action In: [x] repeat 8 ==> Out: [y] repeat 8
  var 
      int xa,
      int xb,
      List (type: int , size=8) y := [0,0,0,0,0,0,0,0],
      int temp1, int temp2, int temp3, int temp4
  do
    xa := x[1] + x[7];
    xb := x[1] - x[7];
    x[1] := xa + x[3];
    x[3] := xa - x[3];
    x[7] := xb + x[5];
    x[5] := xb - x[5];

    temp1 := pmul_1_0(x[3]);
    temp4 := pmul_1_1(x[3]);
    temp3 := pmul_1_0(x[5]);
    temp2 := pmul_1_1(x[5]);
 
    x[3] := temp1 - temp2;
    x[5] := temp3 + temp4;

    temp1 := pmul_2_0(x[1]);
    temp4 := pmul_2_1(x[1]);
    temp3 := pmul_2_0(x[7]);
    temp2 := pmul_2_1(x[7]);
    

    x[1] := temp1 + temp2;
    x[7] := temp3 - temp4;

    temp1 := pmul_3_0(x[2]);
    temp4 := pmul_3_1(x[2]);
    temp3 := pmul_3_0(x[6]);
    temp2 := pmul_3_1(x[6]);
    
    x[2] := temp1 - temp2;
    x[6] := temp3 + temp4;

    xa := x[0] + x[4];
    xb := x[0] - x[4];

    x[0] := xa + x[6];
    x[6] := xa - x[6];

    x[4] := xb + x[2];
    x[2] := xb - x[2];

    y := [x[0] + x[1], x[4] + x[5], x[2] + x[3], x[6] + x[7], x[6] - x[7], x[2] - x[3], x[4] - x[5], x[0] - x[1]];

  end
 end
end

      
     
