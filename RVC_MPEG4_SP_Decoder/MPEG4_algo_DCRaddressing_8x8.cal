// MPEG4_algo_DCRaddressing_8x8.cal
//
// Created By:  David B. Parlour (dave.parlour@xilinx.com)
// Modified By: Andrew Kinane (kinanea@eeng.dcu.ie)
//         
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
//
// Functionality:
// This module calculates the addresses of the three neighbouring blocks for the current
// 8x8 block used for DC prediction. If any of the neighbours is not coded for some reason
// (either outside frame boundaries or skipped by encoder), the address is set as zero.
// Otherwise the lowest two bits specify the 8x8 component in the macroblock and the other
// higher order bits specify the macroblock index using circular buffer addressing. 
//
// Input Ports:
// ============
// int(size=BTYPE_SZ) BTYPE
// This input token specifies the coding mode of the current 8x8 block. When executing, 
// the first 3 BTYPE tokens of a VOP relate to global parameters of the VOP. The first BTYPE 
// token indicates a new VOP, and the subsequent two BTYPE tokens indicate the width and the 
// height of the VOP in macroblocks respectively. All subsequent BTYPE tokens for the VOP 
// specify the coding mode of the current 8x8 block. For details on the structure of the
// BTYPE token, refer to ParseHeaders.cal
//
// Output Ports:
// =============
// int(size=MB_COORD_SZ) A
// The address of the 8x8 block neighbour to the left of the current 8x8 block.
//
// int(size=MB_COORD_SZ) B
// The address of the 8x8 block neighbour to the above left of the current 8x8 block.
//
// int(size=MB_COORD_SZ) C
// The address of the 8x8 block neighbour to the above of the current 8x8 block.
//
// Modifications:
// * In advance action, indices adjust after every component
//   dealing with a single 8x8 block rather than 6 8x8 blocks.
// * The actions predict.b1 predict.b2 predict.b3 predict.b45 are removed since not needed.
// * In action predict.b0 all neighbouring blocks are now component 0.
// * Block pointer bitwidth reduced from MB_COORD_SZ+3 to MB_COORD_SZ since only
//   1 component per block.
// * Variable 'comp' removed since only one component.
namespace RVC:

import System.bitops.bitand;
import System.bitops.bitor;
import System.bitops.lshift;
import System.util.Integers;

actor MPEG4_algo_DCRaddressing_8x8 (int MAXW_IN_MB,
                                    int MB_COORD_SZ,
                                    int BTYPE_SZ,
                                    int NEWVOP,
                                    int INTRA)                                     
           int(size=BTYPE_SZ) BTYPE ==> int(size=MB_COORD_SZ) A, int (size=MB_COORD_SZ) B, int(size=MB_COORD_SZ) C :

  // Generate indices into the stream history to locate
  //   A  neighbor to the left
  //   B  neighbor above left
  //   C  neighbor above
  // Use 3 address lines for component index to save address calculation effort
  // Also, location 0 is reserved for all uncoded blocks. This protocol must
  // be identical to the buffer addressing in Reconstruct.cal, since pointer
  // values are passed on ports A, B, C.

  int(size=MB_COORD_SZ) mbx       := 0;           // Current macroblock x position
  bool                  top_edge  := true;        // Top edge macroblock flag
  bool                  left_edge;                // Left edge macroblock flag
  int(size=MB_COORD_SZ) mbwidth   := 0;           // Macroblock width of current vop
  int BUF_SIZE                              = (MAXW_IN_MB+2);
  List( type:bool, size=BUF_SIZE ) coded := [ false : for int i in Integers(1,BUF_SIZE) ];  
  int(size=MB_COORD_SZ) ptr;                      // Pointer to current macroblock                   
  int(size=MB_COORD_SZ) ptr_left;                 // Pointer to left neighbour macroblock ('A')      
  int(size=MB_COORD_SZ) ptr_above;                // Pointer to above neighbour macroblock ('C')     
  int(size=MB_COORD_SZ) ptr_above_left;           // Pointer to above left neighbour macroblock ('B')

  // Buffer pointer wrap, skipping over address 0
  function decrement( int(size=MB_COORD_SZ) p ) --> int(size=MB_COORD_SZ) :
    if p = 1 then BUF_SIZE-1 else p - 1 end
  end

  // New VOP
  start: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, NEWVOP ) != 0
  do
    mbx       := 0;
    top_edge  := true;
    left_edge := true;
  end

  // Decode width of VOP and initialise flags
  getw: action BTYPE:[w] ==>
  do
    mbwidth        := w;
    ptr            := 1;
    ptr_left       := 2;
    ptr_above      := 1 + w;
    ptr_above_left := 2 + w;
  end

  // Decode height of macroblock (not needed in this FU)
  geth: action BTYPE:[h] ==>
  end

  // Is this an INTRA 8x8 block?
  read.intra: action BTYPE:[ blocktype ] ==>
  guard
    bitand( blocktype, INTRA ) != 0
  do
    coded[ptr] := true;
  end

  // Is this not an INTRA 8x8 block?
  read.other: action BTYPE:[ blocktype ] ==>
  do
    coded[ptr] := false;
  end

  // Move to the next 8x8 block and set flags appropriately
  advance: action ==>
  do
    mbx       := mbx + 1;
    left_edge := false;
    if mbx = mbwidth then
      mbx       := 0;
      top_edge  := false;
      left_edge := true;
    end
    ptr            := decrement( ptr );
    ptr_left       := decrement( ptr_left );
    ptr_above      := decrement( ptr_above );
    ptr_above_left := decrement( ptr_above_left );     
  end

  // Locate prediction indices for block 0
  predict.b0: action  ==>  A:[a], B:[b], C:[c]
  //guard comp = 0
  var
    int(size=MB_COORD_SZ+3) a := 0,
    int(size=MB_COORD_SZ+3) b := 0,
    int(size=MB_COORD_SZ+3) c := 0
  do
    if not left_edge then
      // left-neighbor is block 0 from previous macroblock
      a := ptr_left;
      if not coded[ a ] then
        a := 0;
      end
      if not top_edge then
        // above-left-neighbor is block 0 from previous row, col macroblock
        b := ptr_above_left;
        if not coded[ b ] then
          b := 0;
        end
      end
    end
    // above-neighbor is block 0 from previous row macroblock
    if not top_edge then
      c := ptr_above;
      if not coded[ c ] then
        c := 0;
      end
    end
  end

  schedule fsm read :
    read     ( start       ) --> getw;
    getw     ( getw        ) --> geth;
    geth     ( geth        ) --> read;
    read     ( read.intra  ) --> predict;
    read     ( read.other  ) --> advance;
    predict  ( predict     ) --> advance;
    advance  ( advance     ) --> read;
  end

  priority
    start > read;
    read.intra > read.other;
  end
 end
end