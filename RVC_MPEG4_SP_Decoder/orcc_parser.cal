/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace RVC:

import RVC.splitter_Qp;
import RVC.ParseHeaders;
import RVC.MVSequence;
import RVC.BlockExpand;
import RVC.MVReconstruct;
import RVC.splitter_BTYPE;
import RVC.splitter_MV;
import RVC.splitter_420_B;
import RVC.splitter_Qp;

network orcc_parser(int SAMPLE_COUNT_SZ,
					int SAMPLE_SZ,
					int MAXW_IN_MB,
					int MB_COORD_SZ,
					int BTYPE_SZ,
					int NEWVOP,
         			int INTRA,
        			int INTER,
        			int QUANT_MASK,
        			int ROUND_TYPE,
        			int FCODE_MASK,
        			int FCODE_SHIFT,
        			int MOTION,
        			int FOURMV,
        			int ACPRED,
        			int ACCODED,
        			int MV_SZ) 

				bool BITS ==> int BTYPE_Y, int BTYPE_U, int BTYPE_V, 
				    		 int MV_Y, int MV_U, int MV_V, 
							 int B_Y, int B_U, int B_V, 
							 int WIDTH, int HEIGHT, 
							 int QUANT_Y, int QUANT_U, int QUANT_V:   
 
 entities

  	parseheaders = ParseHeaders(ACCODED = ACCODED, 
  								ACPRED = ACPRED,
  								BTYPE_SZ = BTYPE_SZ,
  								FCODE_MASK = FCODE_MASK,
  								FCODE_SHIFT = FCODE_SHIFT,
  								FOURMV = FOURMV,
  								INTER = INTER,
  								INTRA = INTRA,
  								MAXW_IN_MB = MAXW_IN_MB,
  								MB_COORD_SZ = MB_COORD_SZ,
  								MOTION = MOTION,
  								MV_SZ = MV_SZ,
  								NEWVOP = NEWVOP,
  								QUANT_MASK = QUANT_MASK,
  								ROUND_TYPE = ROUND_TYPE,
  								SAMPLE_COUNT_SZ = SAMPLE_COUNT_SZ,
  								SAMPLE_SZ = SAMPLE_SZ);
  								
	mvseq = MVSequence(BTYPE_SZ = BTYPE_SZ,
					   FOURMV = FOURMV,
				 	   INTER = INTER,
					   MAXW_IN_MB = MAXW_IN_MB,
					   MB_COORD_SZ = MB_COORD_SZ,
					   MOTION = MOTION, 
					   NEWVOP = NEWVOP);
					   
    blkexp = BlockExpand(SAMPLE_COUNT_SZ = SAMPLE_COUNT_SZ,
                         SAMPLE_SZ = SAMPLE_SZ);
                         
    mvrecon = MVReconstruct(BTYPE_SZ = BTYPE_SZ,   
                            FCODE_MASK = FCODE_MASK,
                            FCODE_SHIFT = FCODE_SHIFT,                            
                            FOURMV = FOURMV, 
                            INTER = INTER, 
                            MAXW_IN_MB = MAXW_IN_MB, 
                            MB_COORD_SZ = MB_COORD_SZ,
                            MOTION = MOTION, 
                            MV_SZ = MV_SZ, 
                            NEWVOP = NEWVOP);

    splitter_BTYPE = splitter_BTYPE(BTYPE_SZ = BTYPE_SZ,
                                    NEWVOP = NEWVOP);
                                    
    splitter_MV = splitter_MV(BTYPE_SZ = BTYPE_SZ, 
                              MOTION = MOTION, 
                              MV_SZ = MV_SZ, 
                              NEWVOP = NEWVOP);
                               
    splitter_420_B = splitter_420_B(ACCODED = ACCODED,
                                    BLOCK_SZ = 64,
                                    BTYPE_SZ = BTYPE_SZ,
                                    INTER = INTER,
                                    INTRA = INTRA,
                                    NEWVOP = NEWVOP,
                                    SAMPLE_SZ = SAMPLE_SZ);
                                    
    splitter_Qp = splitter_Qp(QUANT_SZ = 6);
    
    structure
        BITS --> parseheaders.bits;
        parseheaders.BTYPE --> splitter_BTYPE.BTYPE;
        parseheaders.BTYPE --> mvseq.BTYPE;
        parseheaders.BTYPE --> mvrecon.BTYPE;
        parseheaders.MV --> mvrecon.MVIN; 
        parseheaders.RUN --> blkexp.RUN;
        parseheaders.VALUE --> blkexp.VALUE;
        parseheaders.LAST --> blkexp.LAST;
        parseheaders.BTYPE --> splitter_MV.BTYPE; 
        parseheaders.BTYPE --> splitter_420_B.BTYPE;
        
        mvseq.A --> mvrecon.A;
        blkexp.OUT --> splitter_420_B.B;
        mvrecon.MV --> splitter_MV.MV;
        
        splitter_BTYPE.Y --> BTYPE_Y;
        splitter_BTYPE.U --> BTYPE_U; 
        splitter_BTYPE.V --> BTYPE_V;
        
        splitter_MV.Y --> MV_Y;
        splitter_MV.U --> MV_U; 
        splitter_MV.V --> MV_V;
        
        splitter_420_B.Y --> B_Y;
        splitter_420_B.U --> B_U;
        splitter_420_B.V --> B_V;
        
        parseheaders.WIDTH --> WIDTH;
        parseheaders.HEIGHT --> HEIGHT;
        parseheaders.QP --> splitter_Qp.QP;
        splitter_Qp.QUANT_Y --> QUANT_Y;
        splitter_Qp.QUANT_U --> QUANT_U;
        splitter_Qp.QUANT_V --> QUANT_V;
 end
end