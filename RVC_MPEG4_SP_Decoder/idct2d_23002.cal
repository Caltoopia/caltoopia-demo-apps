/* 
 * Copyright (c) Ericsson AB, 2013
 * All rights reserved.
 *
 * License terms:
 *
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *     * Redistributions of source code must retain the above 
 *       copyright notice, this list of conditions and the 
 *       following disclaimer.
 *     * Redistributions in binary form must reproduce the 
 *       above copyright notice, this list of conditions and 
 *       the following disclaimer in the documentation and/or 
 *       other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names 
 *       of its contributors may be used to endorse or promote 
 *       products derived from this software without specific 
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace RVC:

import RVC.Scale;
import RVC.scaled_1d_idct;
import RVC.Transpose;
import RVC.rightshift;
import RVC.Clip;

 network idct2d_23002(int OUT_SZ,
		             int PIX_SZ,
		             int SIN_SZ) int IN, bool SIGNED ==> int OUT:

	entities
		scale = Scale(SIN_SZ = SIN_SZ, 
		              SOUT_SZ = OUT_SZ);
		row = scaled_1d_idct(IN_SZ = 32, 
						     OUT_SZ = 32);
		column = scaled_1d_idct(IN_SZ = 32, 
		                        OUT_SZ = 32);
		transpose = Transpose();
		retranspose = Transpose();
		shift = rightshift();
		clip = Clip(isz = OUT_SZ, 
		            osz = PIX_SZ);
		            
	structure	            
       SIGNED --> clip.SIGNED;
       shift.Out --> clip.I; 
       clip.O --> OUT;
       IN --> scale.SIn;
       scale.SOut --> row.In; 
       row.Out --> transpose.In;
       transpose.Out --> column.In;
       column.Out --> retranspose.In; 
       retranspose.Out --> shift.In;
 end
end
