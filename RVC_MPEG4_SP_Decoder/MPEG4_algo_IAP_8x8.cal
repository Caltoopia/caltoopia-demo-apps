// MPEG4_algo_IAP_8x8.cal
//
// Created By:  David B. Parlour (dave.parlour@xilinx.com)
// Modified By: Andrew Kinane (kinanea@eeng.dcu.ie)
//         
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
//
// Input Ports:
// ============
// int(size=SAMPLE_SZ) PQF_AC
// AC coefficient tokens sent in a horizontal raster manner after being 
// decoded and re-ordered by the inverse scan block.
//
// int(size=MB_COORD_SZ) PTR
// The address of the 8x8 block used for the prediction in the encoder.
//
// int(size=3) AC_PRED_DIR
// A flag to communicate the direction of prediction to the IAP block but also info
// about the scan mode of the block to the inverse scan block
// AC_PRED_DIR = -2 => NEWVOP flag
// AC_PRED_DIR = -1 => An uncoded block so skip inverse AC prediction
// AC_PRED_DIR =  0 => No inverse AC prediction but use zig zag inverse scan
// AC_PRED_DIR =  1 => Prediction form the left and use alternate vertical scan
// AC_PRED_DIR =  2 => Prediction form the top and use alternate horizontal scan
//
// Output Ports:
// =============
// int(size=SAMPLE_SZ) QF_AC
// Decoded AC coefficients sent in a horizontal raster manner after inverse AC prediction. 
//
// Modifications:
// * In advance action, indices adjust after every component instead of 6 since now
//   dealing with a single 8x8 block rather than 6 8x8 blocks.

namespace RVC:

import System.bitops.bitand;
import System.bitops.bitxor;
import System.bitops.bitor;
import System.bitops.lshift;
import System.bitops.rshift;
import System.util.Integers;

actor MPEG4_algo_IAP_8x8 (
 int MAXW_IN_MB,
 int MB_COORD_SZ,
 int SAMPLE_SZ
)
  int(size=SAMPLE_SZ) PQF_AC, int(size=MB_COORD_SZ) PTR, int(size=3) AC_PRED_DIR, int(size=6) QP, int(size=6) PREV_QP ==> int(size=SAMPLE_SZ) QF_AC :

  // Use 3 address lines for component index to save address calculation effort
  // Also, location 0 is reserved for all uncoded blocks. This protocol must
  // be identical to the buffer addressing in Predict.cal and Sequence.cal, since
  // pointer values are generated there.

  int(size=8) count;
  int BUF_SIZE = (MAXW_IN_MB + 2);
  int(size=MB_COORD_SZ) ptr;
  int(size=MB_COORD_SZ) pred_ptr;

  // Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
  // Add 4 address lines  so that we can store the left edge and top edge AC values (14 in all).
  List( type:int(size=SAMPLE_SZ), size=BUF_SIZE*16 ) buf := [ 0 : for int k in Integers(1, BUF_SIZE*16)  ];

  bool top;
  bool acpred_flag;  
  int(size=6) s_quant;
  int(size=6) s_prev_quant;
  

  function divroundnearest( int i, int iDenom ) --> int:
	if(i>=0) then
		(i+(iDenom>>1))/iDenom
	else
		(i-(iDenom>>1))/iDenom
	end
  end

  newvop: action AC_PRED_DIR:[ s ] ==>
  guard s = -2
  do
    ptr := 1;      // Start at 1, since 0 is reserved
  end

  skip: action AC_PRED_DIR:[ s ] ==>
  guard s < 0
  do
    count := 64;
  end

  start: action AC_PRED_DIR:[ s ], PTR:[ p ], QP:[qp], PREV_QP:[prev_qp] ==>
  do
    s_quant		:= qp;
    s_prev_quant:= prev_qp;
    count := 1.0;
    pred_ptr := p;
    top := s = 2;
    acpred_flag := s != 0;
  end

  advance: action ==>
  guard
    count = 64
  do
    ptr := if ptr = 1 then BUF_SIZE-1 else ptr-1 end ;    
  end

  copy: action PQF_AC:[ ac ] ==> QF_AC:[ pred ]
  var
    int(size=SAMPLE_SZ) pred := ac,
    int(size=4) v = bitand( count, 7 ),
    int(size=4) h = bitand( rshift( count, 3), 7 ),
    bool top_edge = (h = 0),
    bool left_edge = (v = 0),
    int(size=5) index = if top_edge then v else bitor( h, 8 ) end
  do
    if acpred_flag and ( (top and top_edge) or ((not top) and left_edge) ) then
      if(s_prev_quant=s_quant) then
        pred := pred + buf[ bitor( lshift( pred_ptr, 4 ), index ) ];
      else
      	pred := pred + divroundnearest(buf[ bitor( lshift( pred_ptr, 4 ), index )] * s_prev_quant, s_quant);
      end
    end
    if left_edge or top_edge then
      buf[ bitor( lshift( ptr, 4 ), index ) ] := pred;
    end
    count := count + 1;
  end

  schedule fsm start :
    start   ( newvop  ) --> start;
    start   ( skip    ) --> pred;
    start   ( start   ) --> pred;

    pred    ( copy    ) --> pred;
    pred    ( advance ) --> start;
  end

  priority
    newvop > skip > start;
    advance > copy;
  end
 end
end