// MPEG4_mgnt_Address.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

// Frame buffer address generation for motion compensation

namespace RVC:

import System.bitops.bitand;
import System.bitops.bitxor;
import System.bitops.bitor;
import System.bitops.lshift;
import System.bitops.rshift;

 actor MPEG4_mgnt_Address (
    int SEARCHWIN_IN_MB,      // search window size (in macroblocks)
    int MAXW_IN_MB,           // maximum image width (in macroblocks)
    int MAXH_IN_MB,           // maximum image height (in macroblocks)
    int ADDR_SZ,
    int FLAG_SZ,
    int MV_SZ,
    int MB_COORD_SZ,
    int BTYPE_SZ,
    int INTRA,
    int NEWVOP,
    int MOTION,
    int ROUND_TYPE,
    int LAYOUT)
   int(size=MV_SZ) MV, int(size=BTYPE_SZ) BTYPE ==> int(size=ADDR_SZ) RA, int(size=ADDR_SZ) WA, int(size=FLAG_SZ) halfpel :

  // Frame buffer
  //  * sized for max width, max height + half the search window.
  //  * pixels are written/read ring-buffer fashion
  //  * write pointer leads by half the search window to prevent
  //    over-writing motion comp pixels from the last frame
  //  * luma, chroma_u, chroma_v components are separated
  //  * addressing is pixel-based [x + w * y]
  int maxw_in_pixels         = MAXW_IN_MB * 16;
  int maxh_in_pixels         = MAXH_IN_MB * 16;
  int half_search_in_pixels  = SEARCHWIN_IN_MB * 8 + 16;
  int luma_pixel_offset      = maxw_in_pixels * half_search_in_pixels;
  int chroma_pixel_offset    = maxw_in_pixels * half_search_in_pixels / 4;
  int max_luma_pixels        = maxw_in_pixels * maxh_in_pixels + luma_pixel_offset;
  int max_chroma_pixels      = (maxw_in_pixels * maxh_in_pixels)/4 + chroma_pixel_offset;
  int luma_buf_size          = max_luma_pixels;
  int chroma_buf_size        = max_chroma_pixels;
  int luma_base              = 0;
  int chroma_base            = 0;
 
 

  // Pointers to the start of the ring buffers
  int(size=ADDR_SZ) luma_write_ring_start   := 0;
  int(size=ADDR_SZ) chroma_write_ring_start := 0;
  int(size=ADDR_SZ) luma_read_ring_start ;
  int(size=ADDR_SZ) chroma_read_ring_start ;

  // Properties of the current VOP
  int(size=MB_COORD_SZ) vop_width;
  int(size=MB_COORD_SZ) vop_height;
  int(size=16) vop_luma_width;
  int(size=16) vop_luma_height;
  int(size=16) vop_chroma_width;
  int(size=16) vop_chroma_height;

  // Expected coordinates of the next macroblock in VOP
  int(size=9) next_mbx;
  int(size=9) next_mby;
  int(size=9) next_comp;
  int(size=ADDR_SZ) next_luma_x;
  int(size=ADDR_SZ) next_luma_y;
  int(size=ADDR_SZ) next_chroma_x;
  int(size=ADDR_SZ) next_chroma_y;

  // Set up for next vop - start reading from the prior write location.
  procedure advance_vop( )
  begin
    vop_luma_width    := lshift( vop_width, 4);
    vop_luma_height   := lshift( vop_height, 4);
    vop_chroma_width  := lshift( vop_width, 3);
    vop_chroma_height := lshift( vop_height, 3);

    // Read ring buffers now start from previous write location.
    // Move write location ahead by the offset value.
    luma_read_ring_start  := luma_write_ring_start;
    luma_write_ring_start := luma_write_ring_start - luma_pixel_offset;
    if luma_write_ring_start < 0 then
      luma_write_ring_start := luma_write_ring_start + max_luma_pixels;
    end

    chroma_read_ring_start := chroma_write_ring_start;
    chroma_write_ring_start := chroma_write_ring_start - chroma_pixel_offset;
    if chroma_write_ring_start < 0 then
      chroma_write_ring_start := chroma_write_ring_start + max_chroma_pixels;
    end

    next_mbx            := 0;
    next_mby            := 0;
    next_comp           := 0;
    next_luma_x         := 0;
    next_luma_y         := 0;
    next_chroma_x       := 0;
    next_chroma_y       := 0;
  end

  // Values used to form motion-compensation addresses
  int(size=8) read_count;
  int(size=5) read_row;
  int(size=5) read_col;
  int(size=8) write_count;
  int(size=ADDR_SZ) current_w;
  int(size=ADDR_SZ) current_h;
  int(size=ADDR_SZ) current_size;
  int(size=ADDR_SZ) current_base;
  int(size=ADDR_SZ) current_read_ring_start;
  int(size=ADDR_SZ) current_write_ring_start;
  int(size=ADDR_SZ) current_x;
  int(size=ADDR_SZ) current_y;

  // Move pointers to next block
  procedure advance_block()
  begin

    // Parameters for buffer addressing
    current_w                := if LAYOUT = 1 then vop_luma_width        else vop_chroma_width        end;
    current_h                := if LAYOUT = 1 then vop_luma_height       else vop_chroma_height       end;
    current_size             := if LAYOUT = 1 then max_luma_pixels       else max_chroma_pixels       end;
    current_x                := if LAYOUT = 1 then next_luma_x           else next_chroma_x           end;
    current_y                := if LAYOUT = 1 then next_luma_y           else next_chroma_y           end;
    current_read_ring_start  := if LAYOUT = 1 then luma_read_ring_start  else chroma_read_ring_start  end;
    current_write_ring_start := if LAYOUT = 1 then luma_write_ring_start else chroma_write_ring_start end;
    current_base             := if LAYOUT = 1 then luma_base 		 else chroma_base	          end;    // chroma_u_base

    // Advance the MB coordinates
    // Note:    comp layout
    //      Y         U       V
    //  +---+---+   +---+   +---+
    //  | 0 | 1 |   | 4 |   | 5 |
    //  +---+---+   +---+   +---+
    //  | 2 | 3 | 
    //  +---+---+

//********************************************************************
if LAYOUT = 1 then

    next_comp := next_comp + 1;

    // Move right one block on 0->1 or 2->3 transition  
    if next_comp = 1 or next_comp = 3 then
      next_luma_x := next_luma_x + 8;
    end

    // Move left and down one block on 1->2 transition
    // Note: 'down' is increasing y
    if next_comp = 2 then
      next_luma_x := next_luma_x - 8;
      next_luma_y := next_luma_y + 8;
    end

    // When comp wraps, look for end of row
    if next_comp > 3 then

      next_comp := 0;
      next_mbx := next_mbx + 1;

      if next_mbx >= vop_width then
        // reset to start of line
        next_mbx := 0;
        next_luma_x := 0;

        // Move one block down - no handling for VOP height overflow.
        next_mby := next_mby + 1;
        next_luma_y := next_luma_y + 8;

      else
        // No line wrap, so move luma (x,y) up and right one block
        next_luma_x := next_luma_x + 8;
        next_luma_y := next_luma_y - 8;
      end
    end

  
else // LAYOUT = U ou V
      next_mbx := next_mbx + 1;

      next_chroma_x := next_chroma_x + 8;

      if next_mbx >= vop_width then
        // reset to start of line
        next_mbx := 0;
        next_chroma_x := 0;

        // Move one block down - no handling for VOP height overflow.
        next_mby := next_mby + 1;
        next_chroma_y := next_chroma_y + 8;

      end

end

end
 // du begin 


//********************************************************************


  // Buffer read address. Saturates (x,y) to the size (w,h) and wraps the pointer in either direction
  // (dx, dy) is an arbitrary offset from the upper left corner of the current block.
  function generate_read_addr( int dx, int dy ) --> int
  var
    int(size=ADDR_SZ) x       = current_x + dx,
    int(size=ADDR_SZ) x_sat   = if x < 0 then 0 else if x >= current_w then (current_w - 1) else x end end,
    int(size=ADDR_SZ) y       = current_y + dy,
    int(size=ADDR_SZ) y_sat   = if y < 0 then 0 else if y >= current_h then (current_h - 1) else y end end,
    int(size=ADDR_SZ) i       = current_read_ring_start + x_sat + y_sat * current_w,
    int(size=ADDR_SZ) i_wrap  = if i < 0 then i + current_size else if i >= current_size then i - current_size else i end end  :
    current_base + i_wrap
  end

  // Buffer write address. Does not saturate, only wraps the pointer at the top end
  // (dx, dy) are offsets from the upper left corner of the current block and must lie in the block
  function generate_write_addr( int dx, int dy ) --> int
  var
    int(size=ADDR_SZ) x       = current_x + dx,
    int(size=ADDR_SZ) y       = current_y + dy,
    int(size=ADDR_SZ) i       = current_write_ring_start + x + y * current_w,
    int(size=ADDR_SZ) i_wrap  = if i >= current_size then i - current_size else i end  :
    current_base + i_wrap
  end

  bool round;

  // Start a new VOP by setting VOP parameters and initializing the block scan

  cmd.newVop: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, NEWVOP ) != 0
  do
    round := bitand( cmd, ROUND_TYPE ) != 0;
  end

  getw: action BTYPE:[w] ==>
  do
    vop_width := w;
  end

  geth: action BTYPE:[h] ==>
  do
    vop_height := h;
    advance_vop();
  end

  // Pure texture
  cmd.noMotion: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, INTRA ) != 0
  do
    // Disable motion comp addressing
    read_count  := 81;
    write_count := 0;
  end

  int(size=MV_SZ) mvx;
  int(size=MV_SZ) mvy;
  bool interp_x;

  // Pure motion
  // Encode flags on halfpel: bit2 = interp. x
  //                          bit1 = interp. y
  //                          bit0 = round
  cmd.motion: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, MOTION ) != 0
  end

  getmvx: action MV:[ x ] ==>
  do
    interp_x := bitand( x, 1) = 1;
    mvx := rshift( x, 1 );
  end

  getmvy: action MV:[ y ] ==> halfpel:[ if interp_x then 4 else 0 end + if interp_y then 2 else 0 end + if round then 1 else 0 end ]
  var
   bool interp_y = (bitand(y,1) = 1)
  do
    mvy := rshift( y, 1 );
    read_count  := 0;
    read_row    := 0;
    read_col    := 0;
    write_count := 0;
  end

  // No change in the block
  cmd.neither: action BTYPE:[ cmd ] ==> halfpel:[ 0 ]
  do
    mvx := 0;
    mvy := 0;
    read_count  := 0;
    read_row    := 0;
    read_col    := 0;
    write_count := 0;
  end

  // First set up the buffer pointers for the latest block
  init: action ==>
  do
    advance_block();
  end

  done: action ==>
  guard
    write_count = 64 and read_count = 81
  end

  // Generate write addresses. Priorities are use to make this alternate
  // with the read address generation action (to keep the queues balanced).
  write_addr: action ==> WA:[ a ]
  guard
    write_count < 64,
    write_count < read_count // this makes these two actions alternate
  var
    int a = generate_write_addr( bitand( write_count, 7), rshift( write_count, 3 ) )
  do
    write_count := write_count + 1;
  end

  read_addr: action ==> RA:[ a ]
  guard
    read_count < 81
  var
    int a = generate_read_addr( mvx + read_col, mvy + read_row )
  do
    read_count := read_count + 1;
    read_col := read_col + 1;
    if read_col >= 9 then
      read_col := 0;
      read_row := read_row + 1;
    end
  end

  schedule fsm cmd:
    cmd          ( cmd.newVop      ) --> getw;
    cmd          ( cmd.noMotion    ) --> init;
    cmd          ( cmd.motion      ) --> getmvx;
    cmd          ( cmd.neither     ) --> init;

    init         ( init            ) --> generate;

    generate     ( done            ) --> cmd;
    generate     ( write_addr      ) --> generate;
    generate     ( read_addr       ) --> generate;

    getw  ( getw ) --> geth;
    geth  ( geth ) --> cmd;

    getmvx ( getmvx ) --> getmvy;
    getmvy ( getmvy ) --> init;

  end

  priority
    cmd.newVop   > cmd.noMotion > cmd.motion   > cmd.neither;
    
    done  > write_addr > read_addr;
  end
 end
end
